1 laba

A = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюя.,/\!"
S_H = int(input("Введите (шаг шифровки): "))
text = input("Сообщение которое: ")
ito = ""
for i in text:
    mesto = A.find(i)
    new_mesto = mesto + S_H
    if i in A:
        ito += A[new_mesto]

print("Шифр ",ito)

ito_2 = ""
for i in ito:
    mesto = A.find(i)
    new_mesto = mesto - S_H
    if i in A:
        ito_2 += A[new_mesto]

print("Расшифрованное: ",ito_2)


2 laba

print("Будем шифровать или расшифровывать? cif/decif")
cipher=input()
print("Введите, пожалуйста, ваше предложение: ")
text=input()
 
alphabet = ['а','б','в','г','д','е','ё','ж','з','и','й','к','л','м','н','о','п','р','с','т','у','ф','х','ц','ч','ш','щ','ъ','ы','ь','э','ю','я','А','Б','В','Г','Д','Е','Ё','Ж','З','И','Й','К','Л','М','Н','О','П','Р','С','Т','У','Ф','Х','Ц','Ч','Ш','Щ','Ъ','Ы','Ь','Э','Ю','Я']
alphabet1 = ['ж','з','и','й','к','л','м','н','о','п','р','с','т','у','ф','х','ц','ч','ш','щ','ъ','ы','ь','э','ю','я','а','б','в','г','д','е','ё','Ж','З','И','Й','К','Л','М','Н','О','П','Р','С','Т','У','Ф','Х','Ц','Ч','Ш','Щ','Ъ','Ы','Ь','Э','Ю','Я','А','Б','В','Г','Д','Е','Ё']
alphabet2 = ['о','п','р','с','т','у','ф','х','ц','ч','ш','щ','ъ','а','б','в','г','д','е','ё','ж','з','и','й','к','л','м','н','ы','ь','э','ю','я','О','П','Р','С','Т','У','Ф','Х','Ц','Ч','Ш','Щ','Ъ','А','Б','В','Г','Д','Е','Ё','Ж','З','И','Й','К','Л','М','Н','Ы','Ь','Э','Ю','Я']
alphabet3 = ['q','w','e','r','t','y','u','i','o','p','[',']','a','s','d','f','g','h','j','k','l','z','x','c','v','b','n','m','<','>','@','%','Q','W','E','R','T','Y','U','I','O','P','{','}','A','S','D','F','G','H','J','K','L','Z','X','C','V','B','N','M','+','*','&','$']
gamma = '' '.,:;`\|/()!?№^-=_'
 
def cryp(t):
    z = 0
    ret = []
    for x in text:
        if x in alphabet:
            if (z%3)==0:
                id = alphabet.index(x)
                ret += alphabet1[id]
            elif (z%3)==1:
                id = alphabet.index(x)
                ret += alphabet2[id]
            elif (z%3)==2:
                id = alphabet.index(x)
                ret += alphabet3[id]
            z = z+1
        elif x.isalpha() == False:
            ret.append(gamma[(gamma.find(x)+z)%len(gamma)])
        else:
            ret += x
    sret = ''.join(ret)
    return sret
 
def encreep(t):
    z = 0
    y = 0
    ret = []
    for x in text:
        z = z+1
    while y!=z:
        for x in text:
            if (y%3)==0:
                if x in alphabet1:
                    id = alphabet1.index(x)
                    ret += alphabet[id]
                    y=y+1
                elif x.isalpha() == False:
                    ret.append(gamma[(gamma.find(x)-y)%len(gamma)])
                    y=y+1
            elif (y%3)==1:
                if x in alphabet2:
                    id = alphabet2.index(x)
                    ret += alphabet[id]
                    y=y+1
                elif x.isalpha() == False:                                        #
                    ret.append(gamma[(gamma.find(x)-y)%len(gamma)])               #
                    y=y+1                                                         #
            elif (y%3)==2:
                if x in alphabet3:
                    id = alphabet3.index(x)
                    ret += alphabet[id]
                    y=y+1
                elif x.isalpha() == False:
                    ret.append(gamma[(gamma.find(x)-y)%len(gamma)])
                    y=y+1
            else:
                ret += x
        sret = ''.join(ret)
        return sret
 
if cipher == "cif":
    print(cryp(text))
elif cipher == "decif":
    print(encreep(text))
else:
    print("Прошу прощения, но, видимо, где-то ошибка. Надеюсь, вы правильно всё написали. Приношу извинения за сбой!")
    
3 лаба
arr = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ"
arr1 = "ФН(ЩИГЕRAДЫ~@SЛЯЖ^CШМБQПТХЮЪР}\_#"
arr2 = "*НУЩD+ЕR=ДЦЙЧ[ВЬ)O&{МБQПТХЮЪР}\_<"
arr3 = "ЛН(ЩИ]ЕR%ДЫ~@G/ЯЭЗ'ШМБQПТХЮЪР}\_W"
arr4 = "ФНУЩDКЕRAДЦЙЧS+ЬЖ^C{МБQПТХЮЪР}\_V"
elem_all = zip(arr, arr1, arr2, arr3, arr4, [0 for _ in range(len(arr))])
arr_all = {e[0]: list(e[1:]) for e in elem_all}
 
#################
for i in range(len(arr)):
    print(arr[i], arr_all[arr[i]])
#################
 
m = len(arr_all[arr[0]]) - 1
st = 'АЗБУКА'
res = ''
for w in st:
    tmp = w.lover()
    if tmp in arr:
        k = arr_all[tmp][-1] % m
        res += arr_all[tmp][k]
        arr_all[tmp][-1] += 1
    else:
        res += w
        
print(res)
 
################
for i in range(len(arr)):
    print(arr[i], arr_all[arr[i]])
################



4 лаба (доделать на русский)
cryptMode = input("[E]ncrypt|[D]ecrypt: ").upper()
if cryptMode not in ['E','D']:
	print("Error: mode is not Found!"); raise SystemExit
startMessage = input("Write the message: ").upper()
oneKey = input("Write the key: ").upper()

def encryptDecrypt(mode, message, key):
	key *= len(message) // len(key) + 1  
	finalMessage = ""
	for i, j in enumerate(message):
		if mode in ['E','e']:
			temp = ord(j) + ord(key[i])
		else:
			temp = ord(j) - ord(key[i])
		finalMessage += chr(temp % 26 + ord('A'))
	return finalMessage
print("Final message:",encryptDecrypt(cryptMode, startMessage, oneKey))


one more variant of 4 laba

# Виженер

def form_dict():

    '''
    Словарь с позициями и значениями символов
    '''

    d = {}
    for i in range(0,127):
        d[i] = chr(i)

    return d

def encode_val(word):

    '''
    Позиционирование символов слова из словаря form_dict()
    '''

    list_code = []
    d = form_dict()

    for w in range(len(word)):
        for value in d:
            if word[w] == d[value]:
                list_code.append(value) 
    return list_code


def comparator(value, key):

    '''
    Создание словаря соответствий позиций слова и позиций ключа
    '''

    dic = {}
    item = 0
    full = 0

    for i in value:

        dic[full] = [i,key[item]]
        full += 1
        item += 1

        if (item >= len(key)):
            item = 0

    return dic 

def full_encode(value, key):

    '''
    Создание списка с числами соответствующие позициям символов для шифровки текста 
    '''

    dic = comparator(value, key)
    print('\nCompare full encode: ', dic)
    lst = []
    d = form_dict()

    for v in dic:
        go = (dic[v][0] + dic[v][1]) % len(d)
        lst.append(go)

    return lst

def decode_val(list_in):
    
    '''
    Заполнение списка символами из form_dict  соответствии с позициями списка из full_encode и full_decode
    '''

    list_code = []
    d = form_dict() 

    for i in range(len(list_in)):
        for value in d:
            if list_in[i] == value:
               list_code.append(d[value])

    return list_code

def full_decode(value, key):

    '''
    Создание списка с числами соответствующие позициям символов для дешифровки текста
    '''

    dic = comparator(value, key)
    print('\nCompare full decode: ', dic)
    d = form_dict() 
    lis =[]

    for v in dic:
        go = (dic[v][0]-dic[v][1]+len(d)) % len(d)
        lis.append(go) 
    return lis

if __name__ == "__main__":

    word = input("Input the text: ")
    key = input("Input the key: ")
    
    print('\nWord: ' + word)
    print('Key: ' + key)

    # Шифрование
    value_encoded = encode_val(word)
    key_encoded = encode_val(key)
 
    print('\nEncode value: ', value_encoded)
    print('Encode key: ', key_encoded)

    crypt = full_encode(value_encoded, key_encoded)
    print('\nEncrypt: ', ''.join(decode_val(crypt)))


    # Дешифрование
    print("\nDecode value: ", crypt)
    print("Decode key: ", key_encoded)

    decoded = full_decode(crypt, key_encoded)
    print('\nDecode list: ', decoded)

    decode_word_list = decode_val(decoded)
    print('\nDecrypt: ', ''.join(decode_word_list))

5 лаба
def decode(s:str, k:int=1):
    d = {x+1:'' for x in range(k)}
    c=0
    v=1
    h=(len(s)-(len(s)//k)*k)
    while(v<=h):
        for j in range((len(s)//k)+1): 
            d[v] += s[j+c]
        c +=(len(s)//k)+1
        v +=1
    while(v<k+1):
        for j in range((len(s)//k)):
            d[v] += s[j+c]
        c +=(len(s)//k)
        v +=1
    x = []
    c=0
    while(c<(len(s)//k)):
        for j in d.values():
            x.append(j[c])
        c+=1
    for i in range(h):
        x.append(d[i+1][-1])
    return ''.join(x)
 
def encode(s:str, k:int=1):
    d = {x+1:'' for x in range(k)}
    for i in [s[0+x:k+x] for x in range(0, len(s), k)]:
        c = 1
        for j in i:
            d[c] += j
            c += 1
    return ''.join([x for x in d.values()])
 
strtocode = 'Анализ возможностей подделки подписей называется криптоанализом'
keycode = 7
 
print('Исходная строка:',strtocode,'Ключ:',keycode)
print('Кодируем:',encode(strtocode,keycode))
print('Декодируем:',decode(encode(strtocode,keycode),keycode))

6 лаба
7 лаба
